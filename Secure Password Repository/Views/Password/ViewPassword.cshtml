@using Microsoft.AspNet.Identity;
@using Secure_Password_Repository.Extensions;
@using Secure_Password_Repository.ViewModels;
@model Secure_Password_Repository.ViewModels.PasswordDetails
@{
    ViewBag.Title = "View Password";
    Layout = "~/Views/Shared/_PasswordLayout.cshtml";
}

<!--- token for viewing items  -->
<form id="_CRSFform" action="#" method="post">@Html.AntiForgeryToken()</form>

<div class="edit-panels clearself tabbed-content" id="tabbedpanelcontainer">
    <ul id="tabbedpanelcontainernav" class="tabbed-content-nav">
        @if (Model.OpenTab != DefaultTab.ViewPassword) {
            <li class="ib"><a onclick="tabClick('Details');return false;" class="link first ib" id="tabbedpanelcontainer_1" href="#tabbedpanelcontainer_1_panel">Details</a></li>
        } else {
            <li class="ib"><a onclick="tabClick('Details');return false;" class="link first selected ib" id="tabbedpanelcontainer_1" href="#tabbedpanelcontainer_1_panel">Details</a></li>
        }
        @if(Model.CanEditPassword)
        {
            if (Model.OpenTab != DefaultTab.EditPassword)
            {
                <li class="ib"><a onclick="tabClick('Edit');return false;" class="link ib" id="tabbedpanelcontainer_2" href="#tabbedpanelcontainer_2_panel">Edit</a></li>
            } else {
                <li class="ib"><a onclick="tabClick('Edit');return false;" class="link selected ib" id="tabbedpanelcontainer_2" href="#tabbedpanelcontainer_2_panel">Edit</a></li>
            }
        }
        @if(Model.CanChangePermissions)
        {
            if (Model.OpenTab != DefaultTab.EditPermissions)
            {
                <li class="ib"><a onclick="tabClick('Permissions');return false;" class="link ib" id="tabbedpanelcontainer_3" href="#tabbedpanelcontainer_3_panel">Permissions</a></li>
            } else {
                <li class="ib"><a onclick="tabClick('Permissions');return false;" class="link selected ib" id="tabbedpanelcontainer_3" href="#tabbedpanelcontainer_3_panel">Permissions</a></li>
            }
        }
    </ul>

    <article class="first tabbed-content-panel" id="tabbedpanelcontainer_1_panel" 
                                                                                     @if (Model.OpenTab != DefaultTab.ViewPassword) 
                                                                                     {
                                                                                         @: style="display: none;"
                                                                                     }>
        <h2 style="display: none;">Details</h2>
        <div class="form-horizontal toppaddding">
            <div class="form-group">
                @Html.LabelFor(model => model.ViewPassword.Description, htmlAttributes: new { @class = "control-label col-md-4 viewlabel" })
                <div class="col-md-10 viewtext">
                    @Html.TextBoxFor(model => model.ViewPassword.Description, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ViewPassword.EncryptedUserName, htmlAttributes: new { @class = "control-label col-md-4 viewlabel" })
                <div class="col-md-10 viewtext">
                    <div class="col-text">
                        @Html.TextBoxFor(model => model.ViewPassword.EncryptedUserName, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                    </div>
                    <span class="viewbutton">
                        <a class="btn btn-xs btn-primary autobutton" href="#"><i class="glyphicon glyphicon glyphicon-download-alt">&nbsp;</i>Copy</a>
                    </span>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ViewPassword.EncryptedSecondCredential, htmlAttributes: new { @class = "control-label col-md-4 viewlabel" })
                <div class="col-md-10 viewtext">
                    <div class="col-text">
                        @Html.TextBoxFor(model => model.ViewPassword.EncryptedSecondCredential, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                    </div>
                    <span class="viewbutton">
                        <a class="btn btn-xs btn-primary autobutton" href="#"><i class="glyphicon glyphicon glyphicon-download-alt">&nbsp;</i>Copy</a>
                    </span>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ViewPassword.EncryptedPassword, htmlAttributes: new { @class = "control-label col-md-4 viewlabel" })
                @Html.HiddenFor(model => model.ViewPassword.EncryptedPassword, htmlAttributes: new { @Value="" })
                <div class="col-md-10 viewtext">
                    <span class="viewbutton">
                        <a class="btn btn-xs btn-primary passwordautobutton" href="#" data-passwordid="@Model.ViewPassword.PasswordId"><i class="glyphicon glyphicon glyphicon-download-alt">&nbsp;</i>Copy</a>
                    </span>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ViewPassword.Location, htmlAttributes: new { @class = "control-label col-md-4 viewlabel" })
                <div class="col-md-10 viewtext">
                    <div class="col-text">
                        <a href="http://@Html.Raw(Model.ViewPassword.Location)" onclick="window.open(this.href); return false;">@Html.Raw(Model.ViewPassword.Location)</a>
                    </div>
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ViewPassword.Notes, htmlAttributes: new { @class = "control-label col-md-4 viewlabel" })
                <div class="col-md-10 viewtext">
                    @Html.TextAreaFor(model => model.ViewPassword.Notes, htmlAttributes: new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>

            <div class="form-group">
                <div class="col-md-offset-3 col-md-10">
                    <span class="btn-group">
                        <button type="button" value="Close" class="btn btn-default twobutton" onclick="closeWindow(event);"><i class="glyphicon glyphicon-remove-circle">&nbsp;<span class="text">Close</span></i></button>
                    </span>
                </div>
            </div>

        </div>
        @Html.ValidationSummary(true, "", new { @class = "text-danger accessdenied" })

    </article>

    @if (Model.CanEditPassword)
    {
        
        <article id="tabbedpanelcontainer_2_panel" class="tabbed-content-panel"
                                                                                 @if (Model.OpenTab != DefaultTab.EditPassword)
                                                                                 { 
                                                                                     @: style="display: none;"
                                                                                 }>
            <h2 style="display: none;">Edit</h2>
            @using (Html.BeginForm("EditPassword", "Password"))
            {
                @Html.AntiForgeryToken()
                <div class="form-horizontal toppaddding">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    @Html.HiddenFor(model => model.EditPassword.PasswordId)
                    <div class="form-group">
                        @Html.LabelFor(model => model.EditPassword.Description, htmlAttributes: new { @class = "control-label col-md-4 longlabel" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EditPassword.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EditPassword.Description, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EditPassword.EncryptedUserName, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EditPassword.EncryptedUserName, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EditPassword.EncryptedUserName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EditPassword.EncryptedSecondCredential, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EditPassword.EncryptedSecondCredential, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EditPassword.EncryptedSecondCredential, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EditPassword.EncryptedPassword, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EditPassword.EncryptedPassword, new { htmlAttributes = new { @class = "form-control", @placeholder="(Unchanged)", @Value="" } })
                            @Html.ValidationMessageFor(model => model.EditPassword.EncryptedPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EditPassword.Location, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.EditPassword.Location, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.EditPassword.Location, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.EditPassword.Notes, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-10">
                            @Html.TextAreaFor(model => model.EditPassword.Notes, htmlAttributes: new { @class = "form-control password-textarea" })
                            @Html.ValidationMessageFor(model => model.EditPassword.Notes, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <span class="btn-group">
                                <button type="submit" value="Update" class="btn btn-primary"><i class="glyphicon glyphicon-edit">&nbsp;<span class="text">Update</span></i></button><button type="button" value="Close" class="btn btn-default" onclick="closeWindow(event);"><i class="glyphicon glyphicon-remove-circle">&nbsp;<span class="text">Close</span></i></button>
                            </span>
                        </div>
                    </div>
                </div>
            }
        </article>
    }
    @if (Model.CanChangePermissions)
    {

        <article id="tabbedpanelcontainer_3_panel" class="tabbed-content-panel" 
                                                                                    @if (Model.OpenTab != DefaultTab.EditPermissions) { 
                                                                                        @: style="display: none;"
                                                                                    }>
            <h2 style="display: none;">Permissions</h2>
            @using (Html.BeginForm("EditUserPermissions", "Password"))
            {
                @Html.AntiForgeryToken()
                <div class="form-horizontal toppaddding">
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                    <div class="form-group">
                        <label class="control-label col-md-28 longlabel">Username</label>
                        <div class="col-md-15 column text-center">
                            <strong>Allow Access</strong>
                        </div>
                        <div class="col-md-15 column text-center">
                            <strong>Allow Edit</strong>
                        </div>
                        <div class="col-md-15 column text-center">
                            <strong>Allow Delete</strong>
                        </div>
                        <div class="col-md-15 column text-center">
                            <strong>Allow Permission Access</strong>
                        </div>
                    </div>
                    @for (var i = 0; i < Model.UserPermissions.Count; i++)
                    {
                        @Html.Partial("_PermissionItem", Model.UserPermissions[i], new ViewDataDictionary
                  {
                      TemplateInfo = new TemplateInfo
                      {
                          HtmlFieldPrefix = "UserPermissions[" + i + "]"
                      }
                  }
                                    );
                    }
                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <span class="btn-group">
                                <button type="submit" value="Update" class="btn btn-primary"><i class="glyphicon glyphicon-edit">&nbsp;<span class="text">Update</span></i></button><button type="button" value="Close" class="btn btn-default" onclick="closeWindow(event);"><i class="glyphicon glyphicon-remove-circle">&nbsp;<span class="text">Close</span></i></button>
                            </span>
                        </div>
                    </div>
                </div>
            }
        </article>
    }
</div>


